omriaviv
315817403

1. Algorithm complexity (n = number of total pixels in a given image):

    Part 1 - Image Padding:
        Time O(n+k) (= O(n)), when k is the added padding pixels (k<n).
        Space O(n+k) (= O(n)), when k is the added padding pixels (k<n).
    Part 2 - Image to sub-images:
        Time O(n)
        Space O(n)
    Part 3 - ASCII brightness
        Time O(n) - in case when all characters should be added at once
        Space O(n) - when all characters were computed
        *Note that each ascii char is only computed once.
    Part 4 - Sub-Image Birghtness
        Time O(n)
        Space O(n) - uses 1 extra variable for each sub-image computing
    Part 5 - Calls other parts
        Time O(n)
        Space O(n)
    Total
        Time 5*O(n) = O(n)
        Space 5*O(n) = O(n)

    The data structure that i used to save chars is 2 hash maps, and a hash set.
    The hash set uses to hold chars entered by user. When they input "render", the program checks if any of
    those chars were ever used to render an image. If any of them did - that char it is saved in the first
    hash map - a hash map that holds chars along with their brightnesses, for future uses.
    if a char is about to be rendered for the first time, it computes its brightness value and stores it in
    the first hash map.
    the second hash map is the one that holds the final letters for the current render process - All
    characters currently used to render are found in this hash map.


2. API Additions and Changes:

    1 API change @Image
        1.1 subImageIterator - a default method to create the required iterator
        1.2 createSubImage - a default method created to implement at fileImage

    2. Added new class @PixelImage
        2.1 a class represents an image that was created from other image
        2.2 its constructor is public

    3. API change @FileImage
        3.1 createSubImage is now public, so it could be used by brightnessImgCharMatcher.chooseChars()

    4. API change & inner function change @ImageIterableProperty
        4.1 constructor now also receives <int size> variable
        4.2 @iterator.next now incrementing x & y variables by size instead of 1

3. Iterator

    The iterator was created on the given ImageIterableProperty class.
    The iterator receives an Image constructor, that creates the image based on given parameters -
    the size and start location.
    On the next iteration, since all pixels from the current (x,y) to (x+width, y+height) were used to
    create the previous sub-image, the iterator will skip all of them by incrementing x & y by the size of
    the sub image, instead of by 1.